#!/bin/bash

SCRIPT_START_TIME=$(date -Iminutes)
ENVDIR_BIN=$(which envdir)
RUNPARTS_BIN=$(which run-parts)
TS_BIN=$(which ts)

trap "TERM_SIGNALED=1" TERM EXIT

# cloe_run_parts: Run scripts in a directory using run-parts
function cloe_run_parts {
  if [[ -z ${RUNPARTS_BIN} ]]; then
    return
  fi
  if [[ ! -d $1 ]]; then
    return
  fi
  if [[ ! -r $1 ]]; then
    echo "cloe_run_parts: Directory ${1} exists but is not readable." | eval ${PIPECMD}
    return
  fi
  ${RUNPARTS_BIN} --lsbsysinit --verbose -- $1
}

# envdir_source: Builds an envdir command string for a directory
# and adds it to the ENVDIR_CMD variable
function envdir_source {
  if [[ -z ${ENVDIR_BIN} ]]; then
    return
  fi
  if [[ ! -d $1 ]]; then
    return
  fi
  if [[ ! -r $1 ]]; then
    echo "envdir_source: Directory ${1} exists but is not readable." | eval ${PIPECMD}
    return
  fi
  echo "Sourcing environment variables from directory '${1}'" | eval ${PIPECMD}
  ENVDIR_CMD="${ENVDIR_CMD} ${ENVDIR_BIN} ${1}"
}

function set_screen_title {
  printf "\033k%s\033\\" "$*"
}

function set_cloe_status {
  local SIGNALS=""

  # If running under a 'screen' session, set the window name
  if [[ ! -z ${TERM_SIGNALED} ]]; then
    SIGNALS="${SIGNALS} [SIGTERM] "
  fi
  if [ -n "$STY" ] ; then
    set_screen_title "${SCRIPT_START_TIME} ($(date -Iseconds)) ${CLOE_RUN_CONF_NAME} ${SIGNALS}-- $*"
  fi
}

function check_suspend {
  local SUSPEND_FILE=${1:-${CLOE_RUN_SUSPEND_FILE:-"${CLOE_RUN_SUSPEND_DIR:-${PWD}}/suspend.cloe_run"}}
  local SUSPEND_SLEEP=${2:-${CLOE_RUN_SUSPEND_SLEEP:-"5m"}}

  while [ -f ${SUSPEND_FILE} ];
  do
    if [ -z ${SUSPEND_TIME} ]; then
      SUSPEND_TIME=$(date -Iminutes)
    fi
    set_cloe_status "Suspended since ${SUSPEND_TIME}"
    echo -n "Script is suspended since ${SUSPEND_TIME}. Delete '${SUSPEND_FILE}' file to resume it. " | eval ${PIPECMD}
    if [[ -z `which inotifywait` ]]; then
      echo "Now entering sleep for ${SUSPEND_SLEEP}..." | eval ${PIPECMD}
      sleep ${SUSPEND_SLEEP}
    else
      echo "Waiting indefinitely..." | eval ${PIPECMD}
      inotifywait --event delete ${SUSPEND_FILE}
    fi
  done
  SUSPEND_TIME=""
}

##############################################################################
# Build PIPECMD string
#
# All the output will be piped through this command chain. This allows you
# to customize the output behaviour, such as disabling output timestamping.

# Allow to disable timestamping.
if [[ -z ${CLOE_RUN_DISABLE_TIMESTAMP} ]]; then
  if [[ -z ${TS_BIN} ]]; then
    echo "Program 'ts' is not installed. You can find it in the 'moreutils' package."
    exit 1
  fi
  PIPECMD=" ts |"
fi

# Add optional, user-supplied commands to pipe chain.
# Warning: Some commands can break the chain because they do not forward
# their received input to stdout.
# Example: using 'logger' without the '--stderr' option.
if [[ ! -z ${CLOE_RUN_PIPECMD} ]]; then
  PIPECMD="${PIPECMD} ${CLOE_RUN_PIPECMD} |&"
fi

# Close PIPECMD with optional output logging to file.
PIPECMD="${PIPECMD} tee -a ${LOGFILE}"
##############################################################################

##############################################################################
# Configuration values
#
# Settings are read from environment variables.
# You can also set them in specific files.
# Default system-wide settings can be set in CLOE_RUN_SYSTEM_DEFAULTS_CONF_FILE.
# Common local directory settings can be set in CLOE_RUN_COMMON_CONF_FILE.
# You can specify a script-level settings file in the CLOE_RUN_CONF_FILE
# environment variable or passing the configuration file name as the
# first command argument. If it is not set, script-level conf file will
# default to "SCRIPTNAME.conf" file.

CLOE_RUN_SYSTEM_CONF_DIR="/etc/cloe_run"
CLOE_RUN_SYSTEM_DEFAULTS_CONF_FILE="/etc/default/cloe_run"

# Try to get the configuration filename from the command line parameter
# first. This takes precedence over environment variable value.
if [[ ! -z ${1} ]]; then
  CLOE_RUN_CONF_NAME="${1}"
fi

CLOE_RUN_COMMON_CONF_FILE="conf/cloe_run.common.conf"

[[ -z ${CLOE_RUN_CONF_NAME} ]] && CLOE_RUN_CONF_NAME="${0}"

CLOE_RUN_CONF_FILE="${CLOE_RUN_CONF_NAME}.conf"

##############################################################################

SHUTDOWN_FILE="${0}.shutdown"

while [ ! -r $SHUTDOWN_FILE ];
do

  ############################################################################
  # Check and perform suspension logic
  ############################################################################
  # Check for global "$PWD/suspend.cloe_run" file (default).
  check_suspend
  # Check for script-level "$PWD/suspend.<conf-name>" file.
  check_suspend "${CLOE_RUN_SUSPEND_DIR:-${PWD}}/suspend.$(basename ${CLOE_RUN_CONF_NAME})"
  ############################################################################

  ############################################################################
  # Source configuration files
  if [[ -r ${CLOE_RUN_SYSTEM_DEFAULTS_CONF_FILE} ]]; then
    echo "Sourcing system-wide configuration defaults '${CLOE_RUN_SYSTEM_DEFAULTS_CONF_FILE}'." \
      | eval ${PIPECMD}
    . ${CLOE_RUN_SYSTEM_DEFAULTS_CONF_FILE}
  fi

  envdir_source "${CLOE_RUN_SYSTEM_CONF_DIR}/envdir.d/"

  if [[ -r ${CLOE_RUN_COMMON_CONF_FILE} ]]; then
    echo "Sourcing common configuration file '${CLOE_RUN_COMMON_CONF_FILE}'." \
      | eval ${PIPECMD}
    . ${CLOE_RUN_COMMON_CONF_FILE}
  fi
  envdir_source "${CLOE_RUN_COMMON_CONF_FILE}.d"

  if [[ -r ${CLOE_RUN_CONF_FILE} ]]; then
    echo "Sourcing configuration file '${CLOE_RUN_CONF_FILE}'." \
      | eval ${PIPECMD}
    . ${CLOE_RUN_CONF_FILE}
  else
    echo "Warning: configuration file '${CLOE_RUN_CONF_FILE}' not found." \
      | eval ${PIPECMD}
  fi
  envdir_source "${CLOE_RUN_CONF_FILE}.d"

  if [[ -z ${CLOE_RUN_BIN} ]]; then
    echo "Variable CLOE_RUN_BIN not set. Exiting." | eval ${PIPECMD}
    exit 1
  fi
  ############################################################################

  # Execute the PRE_RUN_COMMAND
  if [[ ! -z ${PRE_RUN_COMMAND} ]]; then
    MSG="Executing PRE_RUN_COMMAND: ${PRE_RUN_COMMAND}"
    echo ${MSG} |& eval ${PIPECMD}
    set_cloe_status ${MSG}
    ${PRE_RUN_COMMAND} |& eval ${PIPECMD}
  fi
  cloe_run_parts "${CLOE_RUN_SYSTEM_CONF_DIR}/pre-run.d" |& eval ${PIPECMD}

  # Build command options
  CMD_PARAMS="${CLOE_RUN_PARAMS} ${CLOE_RUN_PARAMS_EXTRA}"

  # Execute script
  MSG="Executing: ${CLOE_RUN_BIN} ${CMD_PARAMS}"
  echo ${MSG} |& eval ${PIPECMD}
  set_cloe_status ${MSG}
  ${ENVDIR_CMD} ${CLOE_RUN_BIN} ${CMD_PARAMS} 2>&1 | eval ${PIPECMD}

  # Execute the POST_RUN_COMMAND
  if [[ ! -z ${POST_RUN_COMMAND} ]]; then
    MSG="Executing POST_RUN_COMMAND: ${POST_RUN_COMMAND}"
    echo ${MSG} |& eval ${PIPECMD}
    set_cloe_status ${MSG}
    ${POST_RUN_COMMAND} |& eval ${PIPECMD}
  fi
  cloe_run_parts "${CLOE_RUN_SYSTEM_CONF_DIR}/post-run.d" |& eval ${PIPECMD}

  if [[ ! -z ${CLOE_RUN_SINGLE} ]]; then
    MSG="Finished because of single run requested."
    echo ${MSG} |& eval ${PIPECMD}
    set_cloe_status ${MSG}
    exit 0
  fi

  if [[ ! -z ${SLEEP} ]]; then
    MSG="Sleeping for ${SLEEP}..."
    echo ${MSG} |& eval ${PIPECMD}
    set_cloe_status ${MSG}
    sleep ${SLEEP}
  fi

  if [[ ! -z ${TERM_SIGNALED} ]]; then
    MSG="Finished because of TERM signal received."
    echo ${MSG} |& eval ${PIPECMD}
    set_cloe_status ${MSG}
    exit 0
  fi

done

MSG="File ${SHUTDOWN_FILE} found. Exiting."
echo ${MSG} |& eval ${PIPECMD}
set_cloe_status ${MSG}
rm -v ${SHUTDOWN_FILE}
